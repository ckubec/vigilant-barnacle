{"version":3,"sources":["banner.tsx","header.tsx","body.tsx","app.tsx","index.js"],"names":["BannerCanvas","props","windowheight","window","innerHeight","windowwidth","innerWidth","grid","interval","handleWindowResize","bind","buildGrid","offsety","Math","sqrt","z","this","x","push","Hexagon","rebuildGrid","width","height","style","backgroundColor","display","map","draw","addEventListener","setInterval","tick","clearInterval","floor","random","length","setColor","randColor","replace","forceUpdate","React","Component","y","size","color","stroke","sides","radius","fill","tabs","buttonstyle","fontFamily","padding","fontSize","marginRight","textShadow","Header","brand","shift","items","tab","name","NavItem","key","Nav","Link","toUpperCase","Navbar","collapseOnSelect","borderBottom","background","sticky","expand","NavbarBrand","NavbarToggle","aria-controls","NavbarCollapse","id","className","Body","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0300f734.chunk.js","sourcesContent":["import React from 'react';\nimport {Stage, Layer, RegularPolygon} from 'react-konva';\n\n\nexport class BannerCanvas extends React.Component {\n    windowheight = window.innerHeight;\n    windowwidth = window.innerWidth;\n    grid: Hexagon[] = [];\n    interval: any;\n    constructor(props:any) {\n        super(props);\n        this.handleWindowResize = this.handleWindowResize.bind(this);\n        this.buildGrid();\n    }\n\n    buildGrid() {\n        let size = 40;\n        let offset = 3 / 2 * size;\n        let offsety = Math.sqrt(3) * size;\n\n        for (let z = 0; z < this.windowheight; z += offset) {\n            for (let x = 0; x <= this.windowwidth + offsety; x+=offsety) {\n                if ((z/offset) % 2 === 0) {\n                    this.grid.push( new Hexagon(x, z, size, \"black\"));\n                } else {\n                    this.grid.push( new Hexagon(x - offsety/2, z, size, \"black\"));\n                }\n            }\n        }\n    }\n\n    rebuildGrid() {\n        this.grid = [];\n        this.buildGrid();\n    }\n\n    handleWindowResize() {\n        this.windowheight = window.innerHeight;\n        this.windowwidth = window.innerWidth;\n        this.rebuildGrid();\n    }\n\n    render() {\n        const canvasstyle = {\n            backgroundColor: \"black\",\n            display: \"flex\"\n        };\n\n        return (\n            <Stage width={this.windowwidth} height={400} style={canvasstyle}>\n                <Layer>\n                    {this.grid.map(grid => grid.draw())}\n                </Layer>\n            </Stage>\n        );\n    }\n\n    componentDidMount(): void {\n        window.addEventListener(\"resize\", this.handleWindowResize);\n        this.interval = setInterval(() => this.tick(), 100);\n    }\n\n    componentWillUnmount(): void {\n        clearInterval(this.interval);\n    }\n\n    tick() {\n        this.grid[Math.floor(Math.random()*(this.grid.length))].setColor(this.grid[0].randColor());\n        this.grid[Math.floor(Math.random()*(this.grid.length))].setColor(\"rgba(0,0,0,alp\".replace(\"alp\", \"1\"));\n\n        this.forceUpdate();\n    }\n}\n\n\nclass Hexagon {\n    x:number;\n    y:number;\n    size:number;\n    color:string;\n    stroke:string;\n\n    constructor(x:number, y:number, size:number, color:string) {\n        this.x = x;\n        this.y = y;\n        this.size = size;\n        this.color = color;\n        this.stroke = \"black\";\n    }\n\n    draw() {\n        return <RegularPolygon sides={6} radius={this.size} x={this.x} y={this.y} fill={this.color} stroke={this.stroke} />;\n    }\n\n    setColor(color:string) {\n        this.color = color;\n        this.stroke = color;\n    }\n\n    randColor() {\n        return \"rgba(\" + Math.floor(Math.random()*256) + \", \"+ Math.floor(Math.random()*256) + \", \"+ Math.floor(Math.random()*256) + \", \"+ Math.floor(Math.random()*256) + \")\";\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {Nav, Navbar, NavbarBrand, NavItem} from \"react-bootstrap\";\nimport './header.css';\nimport NavbarCollapse from \"react-bootstrap/NavbarCollapse\";\nimport NavbarToggle from \"react-bootstrap/NavbarToggle\";\nimport {BannerCanvas} from \"./banner\";\n\n\nlet tabs = [\"Chris Kubec\", \"About\", \"Skills\", \"Projects\", \"Connect\"];\nconst buttonstyle = {\n    color: \"#ffffff\",\n    fontFamily: 'Dosis, sans-serif',\n    backgroundColor: \"black\",\n    padding: \".5em 1.5em .5em\",\n    fontSize: \"20px\",\n    marginRight: \".5em\",\n    textShadow: \"160\"\n};\n\nexport class Header extends React.Component {\n    render() {\n        const styling = {\n            color: '#3739ff',\n            borderBottom: \"3px solid black\",\n            background: \"black\"\n        };\n        const brand = tabs.shift();\n        let items = tabs.map(tab => myNavItems(tab));\n\n        const togglestyle = {\n            padding: \".5em 1.5em .5em\",\n            color: \"white\",\n        };\n\n        const titlestyle = {\n            color: \"white\",\n            fontFamily: 'Dosis, sans-serif',\n            fontSize: \"20px\",\n        };\n\n        return (\n            <>\n                <BannerCanvas />\n\n                <Navbar collapseOnSelect style={styling} sticky=\"top\" expand=\"lg\"  >\n                    <NavbarBrand style={titlestyle}><Nav.Link style={buttonstyle}>{brand?.toUpperCase()}</Nav.Link></NavbarBrand>\n                    <NavbarToggle aria-controls=\"responsive-navbar-nav\" style={togglestyle}/>\n                    <NavbarCollapse id=\"responsive-navbar-nav\" >\n                        <Nav className=\"justify-content-center\">{items}</Nav>\n                    </NavbarCollapse>\n                </Navbar>\n            </>\n        );\n    }\n}\n\nfunction myNavItems(name:string) {\n    return (\n        <NavItem key={name} >\n            <Nav.Link style={buttonstyle} >{name.toUpperCase()}</Nav.Link>\n        </NavItem>\n    );\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport class Body extends React.Component {\n    render() {\n        return (\n            <br>\n            </br>\n        );\n    }\n}\n","import React from 'react';\nimport './index.css';\nimport {Header} from \"./header\";\nimport {Body} from \"./body\";\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <>\n                <Header/>\n                <Body>about</Body>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(<App />, document.getElementById(\"app\"));"],"sourceRoot":""}
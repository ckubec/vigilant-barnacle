{"version":3,"sources":["banner.tsx","header.tsx","app.tsx","index.js"],"names":["BannerCanvas","hex","canvasRef","React","createRef","state","height","window","innerHeight","width","innerWidth","handleWindowResize","bind","getHeight","this","setState","console","log","drawGrid","addEventListener","canvas","z","current","getContext","Math","sqrt","props","i","hexdens","canvasstyle","backgroundColor","outerWidth","display","Hexagon","draw","offsety","push","sides","radius","x","y","fill","stroke","style","Component","size","offset","color","hexagon","Konva","RegularPolygon","strokeWidth","getWidth","tabs","buttonstyle","fontFamily","padding","fontSize","marginRight","textShadow","Header","shift","items","map","tab","name","NavItem","key","Nav","Link","toUpperCase","Navbar","collapseOnSelect","borderBottom","background","sticky","expand","NavbarBrand","NavbarToggle","aria-controls","NavbarCollapse","id","className","App","ReactDOM","render","document","getElementById"],"mappings":"2TAWaA,EAAb,YAEI,WAAYC,GAAe,IAAD,8BACtB,4CAAMA,KAFVC,UAAiDC,IAAMC,YAGnD,EAAKF,UAAYC,IAAMC,YACvB,EAAKC,MAAQ,CACTC,OAAQC,OAAOC,YACfC,MAAOF,OAAOG,YAElB,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBARK,EAF9B,kFAcQE,KAAKC,SAAS,CACVT,OAAQC,OAAOC,YACfC,MAAOF,OAAOG,aAClBM,QAAQC,IAAIH,KAAKT,OACjBS,KAAKI,aAlBb,kCAsBQ,OAAOX,OAAOG,aAtBtB,0CA0BQH,OAAOY,iBAAiB,SAAUL,KAAKH,oBACvCG,KAAKI,aA3Bb,iCA+CQ,IAhBA,IAAIE,EAASN,KAAKZ,UAgBVmB,GAfmCD,EAAOE,SAAUF,EAAOE,QAAQC,WAAW,MASxEC,KAAKC,KAAK,GAMd,GAAGJ,EAAEP,KAAKY,MAAMpB,OAXZ,GAW4Be,IACtC,IAAK,IAAIM,EAAI,EAAGA,EAAIC,GAAWD,QAhD3C,+BA8DQ,IAAME,EAAc,CAChBC,gBAAiB,QACjBrB,MAAOF,OAAOwB,WACdzB,OAAQC,OAAOC,YAAY,EAC3BwB,QAAS,QAEC,IAAIC,EAAQ,EAAE,EAAE,GAAG,GAAG,QAC5BC,OACR,IAIIC,EAJO,GAIGX,KAAKC,KAAK,GACpBxB,EAAM,GAGVe,QAAQC,IAAI,cAFA,KAEsB,WAAYH,KAAKD,aACnD,IAAI,IAAIQ,EAAE,EAAGA,EAAE,EAAGA,IACd,IAAK,IAAIM,EAAI,EAAGA,GAAK,GAAIA,IACjBN,EAAG,IAAM,EACTpB,EAAImC,KAAK,kBAAC,iBAAD,CAAgBC,MAAO,EAAGC,OAZpC,GAYkDC,EAAGJ,EAAQR,EAAGa,EAAG,EATjE,GAS2EnB,EAAGoB,KAAM,QAASC,OAAQ,WAEtGzC,EAAImC,KAAK,kBAAC,iBAAD,CAAgBC,MAAO,EAAGC,OAdpC,GAckDC,EAAGJ,EAAQR,EAAEQ,EAAQ,EAAGK,EAAG,EAX3E,GAWqFnB,EAAGoB,KAAM,QAASC,OAAQ,WAM5H,OACI,kBAAC,QAAD,CAAOjC,MAAOF,OAAOG,WAAYJ,OAAQ,IAAKqC,MAAOd,GACjD,kBAAC,QAAD,KACK5B,QA7FrB,GAAkCE,IAAMyC,WAoGlCX,E,WAOF,WAAYM,EAAUC,EAAUK,EAAaC,EAAeC,GAAe,yBAN3ER,OAM0E,OAL1EC,OAK0E,OAJ1EK,UAI0E,OAH1EC,YAG0E,OAF1EC,WAE0E,EACtEjC,KAAKyB,EAAIA,EACTzB,KAAK0B,EAAIA,EACT1B,KAAK+B,KAAOA,EACZ/B,KAAKgC,OAASA,EACdhC,KAAKiC,MAAQA,E,mDAIb,IAAIC,EAAU,IAAIC,IAAMC,eAAe,CACnCX,EAAG,IACHC,EAAG,IACHH,MAAO,EACPC,OAAQ,GACRG,KAAM,QACNC,OAAQ,QACRS,YAAa,IAGjB,OADAnC,QAAQC,IAAI+B,EAAQnC,YAAa,IAAKmC,EAAQI,YACvC,kBAAC,iBAAD,CAAgBf,MAAO,EAAGC,OAAQ,GAAIC,EAAG,IAAKC,EAAG,IAAKC,KAAM,QAASC,OAAQ,c,KChIxFW,EAAO,CAAC,cAAe,QAAS,WAAY,WAC1CC,EAAc,CAChBP,MAAO,UACPQ,WAAY,oBACZzB,gBAAiB,QACjB0B,QAAS,kBACTC,SAAU,OACVC,YAAa,OACbC,WAAY,OAGHC,EAAb,iLAQQP,EAAKQ,QACL,IAAIC,EAAQT,EAAKU,KAAI,SAAAC,GAAG,OAoCZC,EApC2BD,EAsCvC,kBAACE,EAAA,EAAD,CAASC,IAAKF,GACV,kBAACG,EAAA,EAAIC,KAAL,CAAU1B,MAAOW,GAAeW,EAAKK,gBAHjD,IAAoBL,KAlBZ,OACI,oCACI,yBAAKtB,MAPE,CACXrC,OAAQ,IACRG,MAAO,MAMC,kBAAC,EAAD,CAAcA,MAAOF,OAAOG,WAAYJ,OAAQC,OAAOC,eAG3D,kBAAC+D,EAAA,EAAD,CAAQC,kBAAgB,EAAC7B,MA/BjB,CACZI,MAAO,UACP0B,aAAc,kBACdC,WAAY,SA4BiCC,OAAO,MAAMC,OAAO,MACzD,kBAACC,EAAA,EAAD,CAAalC,MAlBN,CACfI,MAAO,QACPQ,WAAY,oBACZE,SAAU,SAe8B,kBAACW,EAAA,EAAIC,KAAL,CAAU1B,MAAOW,GA3B/C,cA2BmEgB,gBACrE,kBAACQ,EAAA,EAAD,CAAcC,gBAAc,wBAAwBpC,MAxB5C,CAChBa,QAAS,kBACTT,MAAO,WAuBC,kBAACiC,EAAA,EAAD,CAAgBC,GAAG,yBACf,kBAACb,EAAA,EAAD,CAAKc,UAAU,0BAA0BpB,UArCjE,GAA4B3D,IAAMyC,W,ICJnBuC,E,iLATP,OACI,oCACI,kBAAC,EAAD,MACA,wC,GALEhF,IAAMyC,WCDxBwC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,S","file":"static/js/main.f480cbfa.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Konva from 'konva';\nimport {Shape, Stage, Layer, RegularPolygon} from 'react-konva';\n\n\n\ninterface HexState {\n    width: number,\n    height: number\n}\n\nexport class BannerCanvas extends React.Component<HexState> {\n    canvasRef : React.RefObject<HTMLCanvasElement> = React.createRef();\n    constructor(hex:HexState) {\n        super(hex);\n        this.canvasRef = React.createRef();\n        this.state = {\n            height: window.innerHeight,\n            width: window.innerWidth\n        };\n        this.handleWindowResize = this.handleWindowResize.bind(this);\n        this.getHeight = this.getHeight.bind(this);\n    }\n\n    handleWindowResize () {\n        this.setState({\n            height: window.innerHeight,\n            width: window.innerWidth});\n        console.log(this.state);\n        this.drawGrid();\n    }\n\n    getHeight(){\n        return window.innerWidth;\n    }\n\n    componentDidMount(): void {\n        window.addEventListener(\"resize\", this.handleWindowResize);\n        this.drawGrid();\n    }\n\n    drawGrid() {\n        let canvas = this.canvasRef;\n        let ctx: CanvasRenderingContext2D | null = canvas.current ? canvas.current.getContext('2d') : null;\n\n        //ctx?.scale(3,3);\n\n        let hexdens = 50;\n        let size = 100;\n        let x =0;\n        let y =0;\n        let offset = 3/2 * size;\n        let offsety = Math.sqrt(3)*size;\n\n\n        //let temp = new Hexagon(15, 5, size, offset, \"black\");\n        //let hex = [];\n        //temp.draw(ctx);\n        for(let z=0; z<this.props.height/hexdens; z++) {\n            for (let i = 0; i < hexdens-2; i++) {\n                /*let temp;\n                if (i % 2 === 0) {\n                    temp = new Hexagon((x + (offset)) * i, y+(offsety*z), size, offset, \"black\");\n                } else\n                    temp = new Hexagon((x + (offset)) * i, (offsety*z)-(offsety / 2), size, offset, \"black\");*/\n                //hex.push(<RegularPolygon sides={6} radius={70} x={200} y={150} fill={\"black\"} stroke={\"white\"}></RegularPolygon>);\n\n                //temp.draw(ctx);\n            }\n        }\n    }\n\n    render() {\n        const canvasstyle = {\n            backgroundColor: \"black\",\n            width: window.outerWidth,\n            height: window.innerHeight/2,\n            display: \"flex\"\n        };\n        let hextest = new Hexagon(0,0,50,50,\"blue\");\n        hextest.draw();\n        let size = 50;\n        let x =0;\n        let y =0;\n        let offset = 3/2 * size;\n        let offsety = Math.sqrt(3)*size;\n        let hex = [];\n        let width = 1860/(size*2);\n\n        console.log(\"The Height \", width, \" Actual \", this.getHeight());\n        for(let z=0; z<8; z++) {\n            for (let i = 0; i <= 25; i++) {\n                if (z% 2 === 0) {\n                    hex.push(<RegularPolygon sides={6} radius={size} x={offsety*i} y={0+ offset*z} fill={\"black\"} stroke={\"white\"}></RegularPolygon>);\n                } else {\n                    hex.push(<RegularPolygon sides={6} radius={size} x={offsety*i-offsety/2} y={0+ offset*z} fill={\"black\"} stroke={\"white\"}></RegularPolygon>);\n                }\n\n            }\n        }\n\n        return (\n            <Stage width={window.innerWidth} height={400} style={canvasstyle} >\n                <Layer>\n                    {hex}\n                </Layer>\n            </Stage>\n        );\n    };\n}\n\nclass Hexagon {\n    x:number;\n    y:number;\n    size:number;\n    offset:number;\n    color:string;\n\n    constructor(x:number, y:number, size:number, offset:number, color:string) {\n        this.x = x;\n        this.y = y;\n        this.size = size;\n        this.offset = offset;\n        this.color = color;\n    }\n\n    draw() {\n        var hexagon = new Konva.RegularPolygon({\n            x: 100,\n            y: 150,\n            sides: 6,\n            radius: 75,\n            fill: 'white',\n            stroke: \"white\",\n            strokeWidth: 1\n        })\n        console.log(hexagon.getHeight(), \" \", hexagon.getWidth());\n        return <RegularPolygon sides={6} radius={70} x={100} y={150} fill={\"white\"} stroke={\"white\"}></RegularPolygon>;\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {Nav, Navbar, NavbarBrand, NavItem} from \"react-bootstrap\";\nimport './header.css';\nimport NavbarCollapse from \"react-bootstrap/NavbarCollapse\";\nimport NavbarToggle from \"react-bootstrap/NavbarToggle\";\nimport {BannerCanvas} from \"./banner\";\n\n\nlet tabs = [\"Chris Kubec\", \"About\", \"Projects\", \"Connect\"];\nconst buttonstyle = {\n    color: \"#ffffff\",\n    fontFamily: 'Dosis, sans-serif',\n    backgroundColor: \"black\",\n    padding: \".5em 1.5em .5em\",\n    fontSize: \"20px\",\n    marginRight: \".5em\",\n    textShadow: \"160\"\n};\n\nexport class Header extends React.Component {\n    render() {\n        const styling = {\n            color: '#3739ff',\n            borderBottom: \"3px solid black\",\n            background: \"black\"\n        };\n        const brand = \"Chris Kubec\";\n        tabs.shift();\n        let items = tabs.map(tab => myNavItems(tab));\n\n        const togglestyle = {\n            padding: \".5em 1.5em .5em\",\n            color: \"white\",\n        };\n\n        const titlestyle = {\n            color: \"white\",\n            fontFamily: 'Dosis, sans-serif',\n            fontSize: \"20px\",\n        };\n\n        const banner = {\n            height: 400,\n            width: 400\n        }\n\n        return (\n            <>\n                <div style={banner}>\n                    <BannerCanvas width={window.innerWidth} height={window.innerHeight}/>\n                </div>\n\n                <Navbar collapseOnSelect style={styling} sticky=\"top\" expand=\"lg\"  >\n                    <NavbarBrand style={titlestyle}><Nav.Link style={buttonstyle}>{brand.toUpperCase()}</Nav.Link></NavbarBrand>\n                    <NavbarToggle aria-controls=\"responsive-navbar-nav\" style={togglestyle}/>\n                    <NavbarCollapse id=\"responsive-navbar-nav\" >\n                        <Nav className=\"justify-content-center\">{items}</Nav>\n                    </NavbarCollapse>\n                </Navbar>\n            </>\n        );\n    }\n}\n\nfunction myNavItems(name:string) {\n    return (\n        <NavItem key={name} >\n            <Nav.Link style={buttonstyle} >{name.toUpperCase()}</Nav.Link>\n        </NavItem>\n    );\n}","import React from 'react';\nimport './index.css';\nimport {Header} from \"./header\";\n\n\nclass App extends React.Component {\n    render() {\n        return (\n            <>\n                <Header/>\n                <p>Body</p>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\n\nReactDOM.render(<App />, document.getElementById(\"app\"));"],"sourceRoot":""}